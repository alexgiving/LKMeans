import numpy as np


def move_towards_mean(mu: np.ndarray, mu_mean: np.ndarray, t: float) -> np.ndarray:
    '''
    Returns a new point that is moved towards the mean according to the rule:
    point(t) = point + t * (mean - point), 0 ≤ t ≤ 1
    '''
    new_mu = mu + t * (mu_mean - mu)
    return new_mu


def split_points_by_clusters(n_points: int, n_clusters: int, probability: float) -> list[int]:
    n_list = []
    # need be dynamic
    if n_clusters == 2:
        n_1 = int(probability * n_points)
        n_list = [n_1, n_points - n_1]
    elif n_clusters == 3:
        n_1 = int(probability * n_points)
        n_2 = int(probability * n_points)
        n_3 = n_points - n_1 - n_2
        n_list = [n_1, n_2, n_3]
    return n_list


# pylint: disable= too-many-locals
def generate_mix_distribution(
    probability: float,
    mu_list: list[np.ndarray],
    cov_matrices: list[np.ndarray],
    n_samples: int,
    t: float
    ) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
    '''
    Returns points from gaussian distributions.
    Generated by distribution probability, covariation matrix and means vector.
    '''
    n_clusters = len(mu_list)

    mu_mean = np.mean(mu_list, axis=0)
    modified_mu_list = [move_towards_mean(mu, mu_mean, t) for mu in mu_list]

    splited_points = split_points_by_clusters(n_samples, n_clusters, probability)

    distributions = []
    for n, mu, covariance_matrix in zip(splited_points, modified_mu_list, cov_matrices):
        distribution = np.random.multivariate_normal(
            np.squeeze(mu, axis=0), covariance_matrix, n)
        distributions.append(distribution)

    samples = np.concatenate(distributions, axis=0)

    labels = np.array([])
    for lable_id, n in enumerate(splited_points):
        samples_labels = np.full(n, lable_id)
        labels = np.concatenate((labels, samples_labels))

    # Shuffle the samples and labels
    permutation = np.random.permutation(n_samples)
    samples = samples[permutation]
    labels = labels[permutation]

    return samples, labels, np.mean(modified_mu_list, axis=1)
